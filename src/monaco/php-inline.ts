import type { languages } from 'monaco-editor';

/**
 * PHP Inline Language Configuration for Monaco Editor
 * Enables PHP syntax highlighting without requiring <?php opening tag
 */

// PHP Language Configuration
export const phpInlineLanguageConfig: languages.LanguageConfiguration = {
  comments: {
    lineComment: '//',
    blockComment: ['/*', '*/'],
  },
  brackets: [
    ['{', '}'],
    ['[', ']'],
    ['(', ')'],
  ],
  autoClosingPairs: [
    { open: '{', close: '}' },
    { open: '[', close: ']' },
    { open: '(', close: ')' },
    { open: '"', close: '"', notIn: ['string'] },
    { open: "'", close: "'", notIn: ['string', 'comment'] },
  ],
  surroundingPairs: [
    { open: '{', close: '}' },
    { open: '[', close: ']' },
    { open: '(', close: ')' },
    { open: '"', close: '"' },
    { open: "'", close: "'" },
  ],
  folding: {
    markers: {
      start: /^\s*\/\*\*(?!\/)|\{\s*$/,
      end: /^\s*\*\/|\}\s*$/,
    },
  },
  wordPattern: /(-?\d*\.\d\w*)|([^`~!@#%^&*()\-=+[{\]}\\|;:'",.<>/?\s]+)/g,
  indentationRules: {
    increaseIndentPattern: /^.*\{[^}]*$/,
    decreaseIndentPattern: /^\s*\}/,
  },
};

// PHP Monarch Tokenizer for inline mode (no <?php required)
export const phpInlineTokenizer: languages.IMonarchLanguage = {
  tokenPostfix: '.php',
  defaultToken: '',

  keywords: [
    // PHP core keywords
    '__halt_compiler',
    'abstract',
    'and',
    'array',
    'as',
    'break',
    'callable',
    'case',
    'catch',
    'class',
    'clone',
    'const',
    'continue',
    'declare',
    'default',
    'die',
    'do',
    'echo',
    'else',
    'elseif',
    'empty',
    'enddeclare',
    'endfor',
    'endforeach',
    'endif',
    'endswitch',
    'endwhile',
    'eval',
    'exit',
    'extends',
    'final',
    'finally',
    'for',
    'foreach',
    'function',
    'global',
    'goto',
    'if',
    'implements',
    'include',
    'include_once',
    'instanceof',
    'insteadof',
    'interface',
    'isset',
    'list',
    'namespace',
    'new',
    'or',
    'print',
    'private',
    'protected',
    'public',
    'require',
    'require_once',
    'return',
    'static',
    'switch',
    'throw',
    'trait',
    'try',
    'unset',
    'use',
    'var',
    'while',
    'xor',
    'yield',
    'yield from',

    // PHP 7+ keywords
    'fn',
    'match',
    'readonly',
  ],

  typeKeywords: [
    'int',
    'integer',
    'bool',
    'boolean',
    'float',
    'double',
    'real',
    'string',
    'array',
    'object',
    'resource',
    'mixed',
    'numeric',
    'null',
    'void',
    'callable',
    'iterable',
    'self',
    'parent',
    'static',
  ],

  builtinFunctions: [
    // String functions
    'addcslashes',
    'addslashes',
    'bin2hex',
    'chop',
    'chr',
    'chunk_split',
    'convert_cyr_string',
    'convert_uudecode',
    'convert_uuencode',
    'count_chars',
    'crc32',
    'crypt',
    'explode',
    'fprintf',
    'get_html_translation_table',
    'hebrev',
    'hebrevc',
    'hex2bin',
    'html_entity_decode',
    'htmlentities',
    'htmlspecialchars',
    'htmlspecialchars_decode',
    'implode',
    'join',
    'lcfirst',
    'levenshtein',
    'localeconv',
    'ltrim',
    'md5',
    'md5_file',
    'metaphone',
    'money_format',
    'nl_langinfo',
    'nl2br',
    'number_format',
    'ord',
    'parse_str',
    'printf',
    'quoted_printable_decode',
    'quoted_printable_encode',
    'quotemeta',
    'rtrim',
    'setlocale',
    'sha1',
    'sha1_file',
    'similar_text',
    'soundex',
    'sprintf',
    'sscanf',
    'str_contains',
    'str_decrement',
    'str_ends_with',
    'str_getcsv',
    'str_increment',
    'str_ireplace',
    'str_pad',
    'str_repeat',
    'str_replace',
    'str_rot13',
    'str_shuffle',
    'str_split',
    'str_starts_with',
    'str_word_count',
    'strcasecmp',
    'strchr',
    'strcmp',
    'strcoll',
    'strcspn',
    'strip_tags',
    'stripcslashes',
    'stripos',
    'stripslashes',
    'stristr',
    'strlen',
    'strnatcasecmp',
    'strnatcmp',
    'strncasecmp',
    'strncmp',
    'strpbrk',
    'strpos',
    'strrchr',
    'strrev',
    'strripos',
    'strrpos',
    'strspn',
    'strstr',
    'strtok',
    'strtolower',
    'strtoupper',
    'strtr',
    'substr',
    'substr_compare',
    'substr_count',
    'substr_replace',
    'trim',
    'ucfirst',
    'ucwords',
    'utf8_decode',
    'utf8_encode',
    'vfprintf',
    'vprintf',
    'vsprintf',
    'wordwrap',

    // Array functions
    'array_all',
    'array_any',
    'array_change_key_case',
    'array_chunk',
    'array_column',
    'array_combine',
    'array_count_values',
    'array_diff',
    'array_diff_assoc',
    'array_diff_key',
    'array_diff_uassoc',
    'array_diff_ukey',
    'array_fill',
    'array_fill_keys',
    'array_filter',
    'array_find',
    'array_find_key',
    'array_flip',
    'array_intersect',
    'array_intersect_assoc',
    'array_intersect_key',
    'array_intersect_uassoc',
    'array_intersect_ukey',
    'array_is_list',
    'array_key_exists',
    'array_key_first',
    'array_key_last',
    'array_keys',
    'array_map',
    'array_merge',
    'array_merge_recursive',
    'array_multisort',
    'array_pad',
    'array_pop',
    'array_product',
    'array_push',
    'array_rand',
    'array_reduce',
    'array_replace',
    'array_replace_recursive',
    'array_reverse',
    'array_search',
    'array_shift',
    'array_slice',
    'array_splice',
    'array_sum',
    'array_udiff',
    'array_udiff_assoc',
    'array_udiff_uassoc',
    'array_uintersect',
    'array_uintersect_assoc',
    'array_uintersect_uassoc',
    'array_unique',
    'array_unshift',
    'array_values',
    'array_walk',
    'array_walk_recursive',
    'arsort',
    'asort',
    'compact',
    'count',
    'current',
    'each',
    'end',
    'extract',
    'in_array',
    'is_array',
    'key',
    'key_exists',
    'krsort',
    'ksort',
    'natcasesort',
    'natsort',
    'next',
    'pos',
    'prev',
    'range',
    'reset',
    'rsort',
    'shuffle',
    'sizeof',
    'sort',
    'uasort',
    'uksort',
    'usort',

    // Common PHP functions
    'file_exists',
    'file_get_contents',
    'file_put_contents',
    'is_null',
    'is_string',
    'is_int',
    'is_float',
    'is_bool',
    'is_object',
    'is_resource',
    'is_callable',
    'is_numeric',
    'var_dump',
    'var_export',
    'serialize',
    'unserialize',
    'json_encode',
    'json_decode',
    'preg_match',
    'preg_replace',
    'preg_split',
    'date',
    'time',
    'strtotime',
    'microtime',
    'sleep',
    'usleep',
  ],

  constants: [
    // Boolean and null constants
    'true',
    'false',
    'null',
    'TRUE',
    'FALSE',
    'NULL',

    // Magic constants
    '__CLASS__',
    '__DIR__',
    '__FILE__',
    '__FUNCTION__',
    '__LINE__',
    '__METHOD__',
    '__NAMESPACE__',
    '__TRAIT__',
    '__PROPERTY__',
    '__COMPILER_HALT_OFFSET__',

    // PHP Version constants
    'PHP_VERSION',
    'PHP_MAJOR_VERSION',
    'PHP_MINOR_VERSION',
    'PHP_RELEASE_VERSION',
    'PHP_VERSION_ID',
    'PHP_EXTRA_VERSION',

    // Build information
    'ZEND_THREAD_SAFE',
    'ZEND_DEBUG_BUILD',
    'PHP_ZTS',
    'PHP_DEBUG',

    // System information
    'PHP_OS',
    'PHP_OS_FAMILY',
    'PHP_SAPI',
    'PHP_EOL',
    'PHP_MAXPATHLEN',

    // Numeric limits
    'PHP_INT_MAX',
    'PHP_INT_MIN',
    'PHP_INT_SIZE',
    'PHP_FLOAT_DIG',
    'PHP_FLOAT_EPSILON',
    'PHP_FLOAT_MIN',
    'PHP_FLOAT_MAX',

    // Error constants
    'E_ERROR',
    'E_WARNING',
    'E_PARSE',
    'E_NOTICE',
    'E_CORE_ERROR',
    'E_CORE_WARNING',
    'E_COMPILE_ERROR',
    'E_COMPILE_WARNING',
    'E_USER_ERROR',
    'E_USER_WARNING',
    'E_USER_NOTICE',
    'E_RECOVERABLE_ERROR',
    'E_DEPRECATED',
    'E_USER_DEPRECATED',
    'E_ALL',
    'E_STRICT',

    // CLI constants
    'STDERR',
    'STDIN',
    'STDOUT',

    // Debug constants
    'DEBUG_BACKTRACE_PROVIDE_OBJECT',
    'DEBUG_BACKTRACE_IGNORE_ARGS',

    // Path constants
    'DEFAULT_INCLUDE_PATH',
    'PEAR_INSTALL_DIR',
    'PEAR_EXTENSION_DIR',
  ],

  operators: [
    // Assignment operators
    '=',
    '+=',
    '-=',
    '*=',
    '/=',
    '%=',
    '**=',
    '.=',
    '&=',
    '|=',
    '^=',
    '<<=',
    '>>=',
    '??=',

    // Arithmetic operators
    '+',
    '-',
    '*',
    '/',
    '%',
    '**',

    // Comparison operators
    '==',
    '===',
    '!=',
    '<>',
    '!==',
    '<',
    '<=',
    '>',
    '>=',
    '<=>',

    // Logical operators
    '&&',
    '||',
    '!',

    // Bitwise operators
    '&',
    '|',
    '^',
    '~',
    '<<',
    '>>',

    // Increment/Decrement
    '++',
    '--',

    // Other operators
    '?',
    ':',
    '??',
    '=>',
    '.',
    '@',
    '...',
  ],

  symbols: /[=><!~?:&|+\-*/^%@.]+/,
  escapes:
    /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,

  tokenizer: {
    root: [
      // Variables
      [/\$[a-zA-Z_]\w*/, 'variable'],

      // Keywords and identifiers
      [
        /[a-zA-Z_]\w*/,
        {
          cases: {
            '@keywords': 'keyword',
            '@typeKeywords': 'type',
            '@constants': 'constant',
            '@builtinFunctions': 'predefined',
            '@default': 'identifier',
          },
        },
      ],

      // Whitespace
      { include: '@whitespace' },

      // Numbers
      [/[0-9_]*\.[0-9_]+([eE][-+]?\d+)?[fFdD]?/, 'number.float'],
      [/0[xX][0-9a-fA-F_]+[Ll]?/, 'number.hex'],
      [/0[0-7_]+[Ll]?/, 'number.octal'],
      [/0[bB][0-1_]+[Ll]?/, 'number.binary'],
      [/[0-9_]+[Ll]?/, 'number'],

      // Delimiters and operators
      [/[{}()[\]]/, '@brackets'],
      [/[<>](?!@symbols)/, '@brackets'],
      [
        /@symbols/,
        {
          cases: {
            '@operators': 'operator',
            '@default': '',
          },
        },
      ],

      // Strings
      [/"([^"\\]|\\.)*$/, 'string.invalid'], // non-terminated string
      [/'([^'\\]|\\.)*$/, 'string.invalid'], // non-terminated string
      [
        /"/,
        { token: 'string.quote', bracket: '@open', next: '@string_double' },
      ],
      [
        /'/,
        { token: 'string.quote', bracket: '@open', next: '@string_single' },
      ],
      [
        /`/,
        { token: 'string.quote', bracket: '@open', next: '@string_backtick' },
      ],

      // Characters
      [/'[^\\']'/, 'string'],
      [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
      [/'/, 'string.invalid'],
    ],

    whitespace: [
      [/[ \t\r\n]+/, 'white'],
      [/\/\*/, 'comment', '@comment'],
      [/\/\/.*$/, 'comment'],
      [/#.*$/, 'comment'],
    ],

    comment: [
      [/[^/*]+/, 'comment'],
      [/\/\*/, 'comment', '@push'], // nested comment
      ['\\*/', 'comment', '@pop'],
      [/[/*]/, 'comment'],
    ],

    string_double: [
      [/[^\\"$]+/, 'string'],
      [/\$[a-zA-Z_]\w*/, 'variable'],
      [/{\\$[a-zA-Z_]\\w*}/, 'variable'],
      [/@escapes/, 'string.escape'],
      [/\\./, 'string.escape.invalid'],
      [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],
    ],

    string_single: [
      [/[^\\']+/, 'string'],
      [/@escapes/, 'string.escape'],
      [/\\./, 'string.escape.invalid'],
      [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }],
    ],

    string_backtick: [
      [/[^\\`$]+/, 'string'],
      [/\$[a-zA-Z_]\w*/, 'variable'],
      [/@escapes/, 'string.escape'],
      [/\\./, 'string.escape.invalid'],
      [/`/, { token: 'string.quote', bracket: '@close', next: '@pop' }],
    ],
  },
};
